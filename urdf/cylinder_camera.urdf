<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from cylinder_camera.urdf.xacro     | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot>
  <link name="base_link"/>
  <!--
    These properties must be observed by any machine
    that wants to be defined as a turtlebot. Refer
    to the REP for more details.

    http://www.ros.org/reps/rep-0119.html
   -->
  <!--
   ======================================================================
   - REP 119 : Rgb camera link relative to the Base link
   ======================================================================
     Base link is currently defined as the rotational centre on the bottom
     of the base mould. For both create and kobuki this is actually exactly
     the same 3d world point.

     This may cause an issue with a base with much different floor clearance.
     Should we be using base_footprint for this specification instead?

     Note: REP needs to be updated with the information below
     (currently in development and awaiting feedback)
   -->
  <link name="camera_rgb_frame"/>
  <joint name="camera_rgb_joint" type="fixed">
    <origin rpy="0.0 0.0 0.0" xyz="0.0 -0.25 0.04"/>
    <parent link="base_link"/>
    <child link="camera_rgb_frame"/>
  </joint>
  <link name="camera_rgb_optical_frame"/>
  <joint name="camera_rgb_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_rgb_optical_frame"/>
  </joint>
  <link name="camera_link">
    <visual>
      <origin rpy="0 0 1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://gpd_simulation/meshes/kinect.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <box size="0.07271 0.27794 0.073"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.564"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.003881243" ixy="0.0" ixz="0.0" iyy="0.000498940" iyz="0.0" izz="0.003879257"/>
    </inertial>
  </link>
  <joint name="camera_joint" type="fixed">
    <!-- <origin xyz="0 ${-cam_py} 0" rpy="0 0 0"/> -->
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_link"/>
  </joint>
  <!-- The fixed joints & links below are usually published by static_transformers launched by the OpenNi launch
         files. However, for Gazebo simulation we need them, so we add them here.
         (Hence, don't publish them additionally!) -->
  <link name="camera_depth_frame"/>
  <joint name="camera_depth_joint" type="fixed">
    <!-- <origin xyz="0 ${-cam_py} 0" rpy="0 0 0" /> -->
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_depth_frame"/>
  </joint>
  <link name="camera_depth_optical_frame"/>
  <joint name="camera_depth_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_depth_frame"/>
    <child link="camera_depth_optical_frame"/>
  </joint>
  <gazebo reference="camera_link">
    <sensor name="camera" type="depth">
      <always_on>true</always_on>
      <update_rate>20.0</update_rate>
      <camera>
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <format>B8G8R8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>8.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="kinect_camera_controller">
        <cameraName>camera</cameraName>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <frameName>camera_depth_optical_frame</frameName>
        <baseline>0.1</baseline>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
        <pointCloudCutoff>0.4</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <link name="cylinder_link">
    <visual>
      <geometry>
        <cylinder length="0.25" radius="0.02"/>
      </geometry>
      <material name="red">
        <color rgba="1 0 0 1"/>
      </material>
    </visual>
  </link>
  <joint name="base_to_cylinder" type="fixed">
    <parent link="base_link"/>
    <child link="cylinder_link"/>
    <origin rpy="0 0 0" xyz="0.5 -0.25 0.125"/>
  </joint>
</robot>
